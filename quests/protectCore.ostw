import "../utils/index.ostw";

rule: "[Quest - Core] Protect Core Initialize"
if (CurrentQuest == 1)
{
    CoreHealth = RandomInteger(2, 4) * 10;
    QuestTimer = RandomInteger(60, 180);
    MobSpeedIncreaseValue = RandomInteger(2, 6);
    MinWait();
    SetMatchTime(QuestTimer + 1);
    MobSpeedModifier += MobSpeedIncreaseValue / 10;

    SetObjectiveDescription(AllPlayers(Team.Team2),
        <"Don't let the monsters in. Core Health Remaining: <0>", CoreHealth>,
        ObjectiveRev.VisibleToAndString);
    TopHUDHeader(AllPlayers(Team.Team2),
        "Quest: Protect The Core!", null, Color.Green, Color.White, 0);
    BigMessage("New Quest! Protect The Core!")
    QuestHeaderTextId = LastTextID();

    Wait(QuestTimer, WaitBehavior.AbortWhenFalse);
    QuestSuccess = true;
}

rule: "[Quest - Core] Success"
if (CurrentQuest == 1)
if (QuestSuccess == true)
{
    MobSpeedModifier -= MobSpeedIncreaseValue / 10;
    BigMessage(AllPlayers(Team.Team2), "Quest Success: The core has been protected!");
    define coinLoot = RoundToInteger(RandomInteger(4000, 10000) * (QuestTimer / 60) * (1 + (MobSpeedIncreaseValue / 10)), Rounding.Nearest);
    define trinketLoot = RoundToInteger(RandomInteger(40, 80) * (QuestTimer / 60) * (1 + (MobSpeedIncreaseValue / 10)), Rounding.Nearest);
    MinWait();
    AllPlayers(Team.Team2).Coins += coinLoot;
    AllPlayers(Team.Team2).Item_Trinket += trinketLoot;
    NewMessageToAll(<"Received <0> Coins and <1> Trinkets for completing the quest.", coinLoot, trinketLoot>);
    CurrentQuest = 0;
}

rule:"[Quest - Core] Failure"
if (CurrentQuest == 1)
if (CoreHealth <= 0)
{
    MobSpeedModifier -= MobSpeedIncreaseValue / 10;
    BigMessage(AllPlayers(Team.Team2), "Quest Failure: Oh no, the core has been breached!");
    // TODO: Quest failure
    NewMessageToAll("TODO quest failure debuff");
    CurrentQuest = 0;
}

// See Core Damaged logic in mob.ostw despawn()