import "mobsList.ostw";

rule: "[Mob] Reward & Despawn mob"
Event.OnDeath
if (IsDummyBot(Player))
{
	if (YOf(PositionOf(Player)) >= 0 && DistanceBetween(Player, CoreLocation) >= 8) {
		mobs[MobId].handleDead();
	}
	if (Player.MobLevelText > 0) {
		DestroyInWorldText(Player.MobLevelText);
	}
	Wait(1.5, WaitBehavior.IgnoreCondition);
	DestroyDummyBot(Team.All, SlotOf(Player));
    MinWait();
	root.BotList = FilteredArray(AllPlayers(Team.All), IsDummyBot(ArrayElement()));
}

rule: "[Mob] Reached End"
Event.OngoingPlayer
if (IsDummyBot(Player))
if (IsAlive(Player) == true)
if (DistanceBetween(Player, CoreLocation) <= 8)
{
	Wait(0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
	Wait(1, WaitBehavior.AbortWhenFalse);
	mobs[MobId].despawn(Player);
}

rule: "[Mob] Spawn #1"
if (PlayersInSlot(7, Team.All) == false)
{
	Wait(3, WaitBehavior.IgnoreCondition);
	define rand! = RandomInteger(1, 11);
	mobs[rand].spawn(7, rand);
	MinWait();
	PlayersInSlot(7).MobId = rand;
}

rule: "[Mob] Spawn #2"
if (PlayersInSlot(8, Team.All) == false)
{
	Wait(3, WaitBehavior.IgnoreCondition);
	define rand! = RandomInteger(1, 11);
	mobs[rand].spawn(8, rand);
	MinWait();
	PlayersInSlot(8).MobId = rand;
}

rule: "[Mob] Spawn #2"
if (PlayersInSlot(9, Team.All) == false)
{
	Wait(3, WaitBehavior.IgnoreCondition);
	define rand! = RandomInteger(1, 11);
	mobs[rand].spawn(9, rand);
	MinWait();
	PlayersInSlot(9).MobId = rand;
}

rule: "[Mob] Spawn #4"
if (PlayersInSlot(10, Team.All) == false)
{
	Wait(3, WaitBehavior.IgnoreCondition);
	define rand! = RandomInteger(1, 11);
	mobs[rand].spawn(10, rand);
	MinWait();
	PlayersInSlot(10).MobId = rand;
}

rule: "[Mob] Spawn #5"
if (PlayersInSlot(11, Team.All) == false)
{
	Wait(3, WaitBehavior.IgnoreCondition);
	define rand! = RandomInteger(1, 11);
	mobs[rand].spawn(11, rand);
}

disabled rule: "[Mob] Attack"
Event.OngoingPlayer
if (IsDummyBot(Player))
if (IsAlive(Player) == true)
{
	Wait(mobs[MobId].AttackInterval + 0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
	mobs[MobId].attack(Player);
	LoopIfConditionIsTrue();
}

rule: "[Mob] Random Spawn"
Event.OngoingPlayer
if (IsDummyBot(Player))
if (IsAlive(Player))
{
	Wait(0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
	Teleport(Player, RandomValueInArray(MonsterSpawnRandom));
}

// TODO: Implement smart mob moving
rule: "[Mob] Move"
Event.OngoingPlayer
if (IsDummyBot(Player))
{
	Wait(0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
	// StartThrottleInDirection(Player, DirectionTowards(Player, Vector(37.131, 9.703, -87.038)), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
	StartFacing(
		Player,
		DirectionTowards(
			Player,
			FirstOf(
				SortedArray(
					// Only players in zone 1 and players that are not a stealthed sombra
					FilteredArray(root.PlayerList[1], !(HeroOf(ArrayElement()) == Hero.Sombra && IsUsingAbility1(ArrayElement()))),
					AngleBetweenVectors(
						EyePosition(ArrayElement()),
						EyePosition(Player)
					)
				),
			),
		),
		300,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

rule: "[Mob] Has Been Damaged"
Event.OnDamageTaken
if (IsDummyBot(Player))
if (!ArrayContains(Attackers, Attacker()))
{
	if (!Attackers[0]) {
		Attackers[0] = Attacker();
	} else {
		Attackers = Append(Attackers, Attacker());
	}
}

rule: "[Mob] Reposition"
{
	MonsterSpawnRandom = [
		// After initial spawn bridge, near first point
		Vector(7.43, 5.09, -52.39),
		Vector(-2.33, 6, -61.81),
		Vector(10.27, 5.81, -72.62),
		Vector(12.36, 6.01, -91.21),
		Vector(12.34, 6, -57.09),
		Vector(0.62, 4.37, -90.14),

		// Before bridge near initial spawn
		Vector(10.12, 3.83, -30.96),
		Vector(14.64, 4.02, -16.85),
		Vector(-3.87, 1.82, -27.3),
		Vector(-4.94, 0.01, -9.65),
		Vector(20.43, 9, -26.17),
		Vector(-10.559, 3.178, -27.443)
	];
}

rule: "[Mob] Score"
Event.OngoingPlayer
if (IsDummyBot(Player))
if(ScoreOf(Player) != 0)
{
	SetPlayerScore(Player, 0);
}