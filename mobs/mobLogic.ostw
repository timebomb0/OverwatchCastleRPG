import "../utils/index.ostw";
import "mobsList.ostw";


rule: "[Mob] Init Spawns"
{
	UnusedMonsterSpawns = [
		// After initial spawn bridge, near first point
		Vector(7.43, 5.09, -52.39),
		Vector(-2.33, 6, -61.81),
		Vector(10.27, 5.81, -72.62),
		Vector(12.36, 6.01, -91.21),
		Vector(12.34, 6, -57.09),
		Vector(0.62, 4.37, -90.14),

		// Before bridge near initial spawn
		Vector(10.12, 3.83, -30.96),
		Vector(14.64, 4.02, -16.85),
		Vector(-3.87, 1.82, -27.3),
		Vector(-4.94, 0.01, -9.65),
		Vector(20.43, 9, -26.17),
		Vector(-10.559, 3.178, -27.443)
	];
	UsedMonsterSpawns = [];
}

rule: "[Mob] Reward & Despawn mob"
Event.OnDeath
if (IsDummyBot(Player))
{
	mobs[MobId].handleDead();
	if (Player.MobLevelText > 0) {
		DestroyInWorldText(Player.MobLevelText);
	}
	Wait(1.5, WaitBehavior.IgnoreCondition);
	UsedMonsterSpawns = RemoveFromArray(UsedMonsterSpawns, MobSpawnLoc);
	UnusedMonsterSpawns = Append(UnusedMonsterSpawns, MobSpawnLoc);
	DestroyDummyBot(Team.All, SlotOf(Player));
	root.BotList = RemoveFromArray(root.BotList, Player);
}

// We can't set vars on the bot we created, so we create one bot, init it and set MobSpawnLoc on it, then create the next bot
rule: "[Mob] Spawn Mobs"
if (CountOf(BotList) < 5)
if (IsLastBotInitd == true)
{
	Wait(RandomInteger(1, 4), WaitBehavior.IgnoreCondition); // Essentially a respawn timer
	LastBotMobLoc = RandomValueInArray(UnusedMonsterSpawns);
	MinWait();
	UnusedMonsterSpawns = RemoveFromArray(UnusedMonsterSpawns, LastBotMobLoc);
	UsedMonsterSpawns = Append(UsedMonsterSpawns, LastBotMobLoc);
	CreateDummyBot(RandomValueInArray(MobsList), Team.All, -1, LastBotMobLoc, Vector(0, 0, 0));
	IsLastBotInitd = false;
}

rule: "[Mob] Initialize Mob"
Event.OngoingPlayer
if (IsDummyBot(Player))
{
	define mobIndex! = IndexOfArrayValue(MobsList, HeroOf(Player));
	mobs[mobIndex].initialize(Player, mobIndex);
	Player.MobSpawnLoc = LastBotMobLoc;
	IsLastBotInitd = true;
}

rule: "[Mob] Attack"
Event.OngoingPlayer
if (IsDummyBot(Player))
if (IsAlive(Player) == true)
if (CountOf(FilteredArray(PlayersWithinRadius(Player, 50, Team.All, RadiusLOS.Surfaces), !IsDummyBot(ArrayElement()))) > 0)
{
	Wait(mobs[MobId].AttackInterval + 0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
	mobs[MobId].attack(Player);
	LoopIfConditionIsTrue();
}

// rule: "[Mob] Random Spawn"
// Event.OngoingPlayer
// if (IsDummyBot(Player))
// if (IsAlive(Player))
// {
// 	Wait(0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
// 	Teleport(Player, Player.MobSpawnLoc);
// }

// TODO: Implement smart mob moving
rule: "[Mob] Move"
Event.OngoingPlayer
if (IsDummyBot(Player))
{
	Wait(0.032*SlotOf(Player), WaitBehavior.AbortWhenFalse);
	// StartThrottleInDirection(Player, DirectionTowards(Player, Vector(37.131, 9.703, -87.038)), 1, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
	StartFacing(
		Player,
		DirectionTowards(
			Player,
			FirstOf(
				SortedArray(
					// Only players in zone 1 and players that are not a stealthed sombra
					FilteredArray(root.PlayerList[1], !(HeroOf(ArrayElement()) == Hero.Sombra && IsUsingAbility1(ArrayElement()))),
					AngleBetweenVectors(
						EyePosition(ArrayElement()),
						EyePosition(Player)
					)
				),
			),
		),
		300,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

rule: "[Mob] Has Been Damaged"
Event.OnDamageTaken
if (IsDummyBot(Player))
if (!ArrayContains(Attackers, Attacker()))
{
	Attackers = Append(Attackers, Attacker());
}

rule: "[Mob] Score"
Event.OngoingPlayer
if (IsDummyBot(Player))
if(ScoreOf(Player) != 0)
{
	SetPlayerScore(Player, 0);
}