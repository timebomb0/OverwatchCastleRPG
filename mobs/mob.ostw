import "../utils/index.ostw";

class Mob {
	private define CoinsOnKill;
	private define TrinketOnKill;
	private define EnergyOnKill;
	private define CoreDamage;
	private define DamageDealt;
	private define MaxHealth;
	private define HeroMob;
	private define EXPOnKill;
	private define AutoUltChance;
	private define AutoPrimaryAtkChance;
	private define AutoSecondaryAtkChance;
	private define AutoAbility1Chance;
	private define AutoAbility2Chance;
	private define HoldPrimaryFire;
	private define HoldSecondaryFire;
	public define AttackDuringUlt;
	public define AttackInterval;
	
	// Vars set/used only in methods
	private define levelMobRewardModifier;
	private define attackerMobRewardModifier;

	public Mob(ref define heroMob, ref define coinsOnKill, ref define trinketOnKill,
				ref define energyOnKill, ref define expOnKill,
				ref define coreDamage, ref define damageDealt, ref define maxHealth,
				ref define autoUltChance, ref define autoPrimaryAtkChance, ref define autoSecondaryAtkChance,
				ref define autoAbility1Chance, ref define autoAbility2Chance,
				ref define attackDuringUlt, ref define holdPrimaryFire, ref define holdSecondaryFire, ref define attackInterval)
	{
		HeroMob = heroMob;
		CoinsOnKill = coinsOnKill;
		TrinketOnKill = trinketOnKill;
		EnergyOnKill = energyOnKill;
		CoreDamage = coreDamage;
		DamageDealt = damageDealt;
		MaxHealth = maxHealth;
		AutoUltChance = autoUltChance;
		AutoPrimaryAtkChance = autoPrimaryAtkChance;
		AutoSecondaryAtkChance = autoSecondaryAtkChance;
		AutoAbility1Chance = autoAbility1Chance;
		AutoAbility2Chance = autoAbility2Chance;
		AttackDuringUlt = attackDuringUlt;
		AttackInterval = attackInterval;
		HoldPrimaryFire = holdPrimaryFire;
		HoldSecondaryFire = holdSecondaryFire;
		EXPOnKill = expOnKill;
	}

	public void handleDead()
	{
		root.playerItr[SlotOf(root.Player)] = 0;
		while (root.playerItr[SlotOf(root.Player)] < CountOf(root.PlayerList[0]))
		{
			define aPlayer = root.PlayerList[0][root.playerItr[SlotOf(root.Player)]];
			MinWait();

			attackerMobRewardModifier = ArrayContains(root.Player.Attackers, aPlayer) ? 1 : 0.33;
			// If player is much higher or lower level than mob, they get much lower rewards
			if (
				(aPlayer.PlayerLevel / 2 < root.Player.PlayerLevel && aPlayer.PlayerLevel - root.Player.PlayerLevel > 10) ||
				(root.Player.PlayerLevel / 2 < aPlayer.PlayerLevel && root.Player.PlayerLevel - aPlayer.PlayerLevel > 10)
			) {
				levelMobRewardModifier = 1 + (aPlayer.PlayerLevel / 80) + (root.Player.PlayerLevel / 40);
				// levelMobRewardModifier = 0.2 * root.Player.PlayerLevel / 40;
			} else {
				levelMobRewardModifier = 1 + (aPlayer.PlayerLevel / 80) + (root.Player.PlayerLevel / 40);
			}

			aPlayer._MobVars[0] = RoundToInteger(RandomInteger(EXPOnKill * 0.9, EXPOnKill * 1.1) * attackerMobRewardModifier * aPlayer.EXPGainRate * levelMobRewardModifier, Rounding.Nearest);
			aPlayer._MobVars[1] = RoundToInteger(RandomInteger(CoinsOnKill * 0.8, CoinsOnKill * 1.2) * attackerMobRewardModifier * aPlayer.CoinGainRate  * levelMobRewardModifier * root.CoinsOnKillMultiplier, Rounding.Nearest);
			// aPlayer._MobVars[2] = RoundToInteger(root.Item_TrinketModifier * TrinketOnKill * aPlayer.TrinketGainRate, Rounding.Nearest);
			aPlayer._MobVars[2] = RandomInteger(1, 4);
			MinWait();
			
			aPlayer.EXP += aPlayer._MobVars[0];
			aPlayer.Coins += aPlayer._MobVars[1];
			aPlayer.Item_Trinket += aPlayer._MobVars[2];

			aPlayer.RecentGains[0] += aPlayer._MobVars[0];
			aPlayer.RecentGains[1] += aPlayer._MobVars[1];
			aPlayer.RecentGains[2] += aPlayer._MobVars[2];

			root.playerItr[SlotOf(root.Player)] += 1;
			MinWait();
		}

		PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Red, PositionOf(root.Player), 2);
		root.MobKills += 1;
		if (root.CurrentQuest == 2) {
			root.CurrentQuestKills += 1;
		}
	}

	public void despawn(ref define mob)
	{
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, mob, 100);
		if (root.CurrentQuest == 1 && root.CoreHealth > 0) {
			root.CoreHealth -= 1;
		}
		Kill(mob, null);
	}

	public void initialize(ref define mob, ref define mobId) {
		SetRespawnMaxTime(mob, 2);
    	root.BotList = Append(root.BotList, mob);
		define totalPlayerLevelZ1! = 0;
		for (define i! = 0; i < CountOf(root.PlayerList[1]); i++) {
			totalPlayerLevelZ1 += root.PlayerList[1][i].PlayerLevel;
		}
		MinWait();
		// If no players in zone 1 when mob is spawned, then use avereage player level instead of average zone 1 player level
		define averageLevelToUse!;
		if (CountOf(root.PlayerList[1] > 0)) {
			averageLevelToUse = RoundToInteger(totalPlayerLevelZ1 / CountOf(root.PlayerList[1]), Rounding.Nearest);
		} else {
			root.UpdateAveragePlayerLevel();
			MinWait();
			averageLevelToUse = root.AveragePlayerLevel;
		}
		if (averageLevelToUse < 1) {
			 averageLevelToUse = 1;
		}
		MinWait();

		mob.Attackers = [];
		mob.MobId = mobId;
		mob.PlayerLevel = RoundToInteger(RandomInteger(averageLevelToUse * 0.9, averageLevelToUse * 1.1), Rounding.Nearest);
		if (mob.PlayerLevel < 1) {
			mob.PlayerLevel = 1;
		}
		StartDamageModification(mob, root.BotList, 0, DamageModificationRev.ReceiversAndDamagers);

		MinWait();
		SetHealingReceived(PlayersOnHero(HeroMob, Team.Team1), 0);
		SetMaxHealth(mob, (1 + (mob.PlayerLevel * 0.2)) * root.DifficultyModifier * root.MobHealthModifier * (CountOf(root.PlayerList[1]) > 2 ? CountOf(root.PlayerList[1]) / 3 : 1) * MaxHealth);
		MinWait();
		SetPlayerHealth(mob, MaxHealth(mob));
		SetDamageDealt(mob, mob.PlayerLevel * 0.75 * root.DifficultyModifier * root.MobDamageModifier * DamageDealt);

		CreateInWorldText(
			AllPlayers(Team.All),
			<"Level <0>", mob.PlayerLevel>,
			mob, 1, Clipping.ClipAgainstSurfaces, InworldTextRev.VisibleToPositionAndString, Color.Red, Spectators.DefaultVisibility);
		mob.MobLevelText = LastTextID();
	}
	
	public void attack(ref define mob)
	{
		define scaledAttackInterval! = AttackInterval * (1 - (mob.PlayerLevel / 100));
		if (scaledAttackInterval < root.MinimumMobAttackInterval) {
			scaledAttackInterval = root.MinimumMobAttackInterval;
		}
		define rand! = RandomInteger(1, 100);
		Wait(0.1, WaitBehavior.IgnoreCondition);
	
		if (AutoUltChance != false && rand <= AutoUltChance && IsUsingUltimate(mob) != true) {
			SetUltimateCharge(mob, 100);
			Wait(0.1, WaitBehavior.IgnoreCondition);
			PressButton(mob, Button.Ultimate);
		}

		if (IsUsingUltimate(mob)) {
			if (HeroOf(mob) == Hero.Mccree || HeroOf(mob) == Hero.Junkrat) {
				Wait(RandomInteger(2, 5), WaitBehavior.AbortWhenFalse);
			} 
			StartHoldingButton(mob, Button.PrimaryFire);
			Wait(2, WaitBehavior.IgnoreCondition);
			StopHoldingButton(mob, Button.PrimaryFire);
			
			if (IsUsingUltimate(mob)) {
				LoopIfConditionIsTrue();
			}
		}

		if (AutoAbility1Chance != false && rand <= AutoAbility1Chance) {
			PressButton(mob, Button.Ability1);
			mob.MobHasAttacked = true;
		}

		if (AutoAbility2Chance != false && rand <= AutoAbility2Chance) {
			if (mob.MobHasAttacked == true) {
				Wait(AttackInterval, WaitBehavior.AbortWhenFalse);
			}
			
			PressButton(mob, Button.Ability2);
			if (HeroMob == Hero.Moira) {
				Wait(1, WaitBehavior.IgnoreCondition);
				PressButton(mob, Button.SecondaryFire);
			}
			mob.MobHasAttacked = true;
		}

		if (AutoPrimaryAtkChance != false && rand <= AutoPrimaryAtkChance) {
			if (mob.MobHasAttacked == true) {
				Wait(AttackInterval, WaitBehavior.AbortWhenFalse);
			}

			if (HoldPrimaryFire){
				StartHoldingButton(mob, Button.PrimaryFire);
				Wait(RandomInteger(0.500, 3), WaitBehavior.IgnoreCondition);
				StopHoldingButton(mob, Button.PrimaryFire);
			} else {
				PressButton(mob, Button.PrimaryFire);
			}
			mob.MobHasAttacked = true;
		}

		if (AutoSecondaryAtkChance != false && rand <= AutoSecondaryAtkChance) {
			if (mob.MobHasAttacked == true) {
				Wait(AttackInterval, WaitBehavior.AbortWhenFalse);
			}

			if (HoldSecondaryFire){
				StartHoldingButton(mob, Button.SecondaryFire);
				Wait(RandomInteger(0.500, 3), WaitBehavior.IgnoreCondition);
				StopHoldingButton(mob, Button.SecondaryFire);
			} else {
				PressButton(mob, Button.SecondaryFire);
			}
		}
		
		mob.MobHasAttacked = false;
	}
}